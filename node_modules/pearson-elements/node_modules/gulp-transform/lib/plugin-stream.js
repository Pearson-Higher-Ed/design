'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PluginStream = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _stream = require('stream');

var _fileStream = require('./file-stream');

var _transform2 = require('./transform');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PluginStream = exports.PluginStream = function (_Transform) {
  _inherits(PluginStream, _Transform);

  function PluginStream(transformFn) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, PluginStream);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PluginStream).call(this, { objectMode: true }));

    _this.fn = transformFn;
    _this.opts = options;
    return _this;
  }

  _createClass(PluginStream, [{
    key: '_transform',
    value: function _transform(file, encoding, next) {
      var fn = this.fn;
      var opts = this.opts;


      if (file.isBuffer()) {
        file.contents = (0, _transform2.transform)(fn, file.contents, file, opts);
      }

      if (file.isStream()) {
        file.contents = file.contents.pipe(new _fileStream.FileStream(fn, file, opts));
      }

      next(null, file);
    }
  }]);

  return PluginStream;
}(_stream.Transform);