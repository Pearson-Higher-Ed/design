// Templates Mixins


@mixin generate-templates(){

  @include pe-template-single();
  @include pe-template-static-large();
  @include pe-template-static-small();
  @include pe-template-double();
  @include pe-template-spacing();

};


@mixin pe-template-single(){

  .pe-template__single{
    box-sizing    : border-box;
    min-height    : $pe-columns-min-height;
    margin-right  : auto;
    margin-left   : auto;

    @include clearfix();

    @each $breakpoint in map-keys($pe-responsive-breakpoints) {

      //Get container margin by breakpoint
      $margin                       : map-get($pe-container-margin, $breakpoint);
      $current-breakpoint-value-get : get-breakpoint-value($breakpoint);

      //Construct media query
      @media(min-width:$current-breakpoint-value-get){
        padding-right : $margin;
        padding-left  : $margin;
      };
    };
  };

};


@mixin pe-template-static-large(){

  .pe-template__static-large{
    box-sizing    : border-box;
    min-height   : $pe-columns-min-height;
    margin-right : auto;
    margin-left  : auto;

    @include clearfix();

    @each $breakpoint in map-keys($pe-static-template-width-breakpoints) {

      //Get container margin by breakpoint
      $margin                       : map-get($pe-static-template-width-breakpoints, $breakpoint);
      $current-breakpoint-value-get : get-breakpoint-value($breakpoint);

      //Construct media query
      @media(min-width:$current-breakpoint-value-get){
        @if $breakpoint == "lg" or $breakpoint == "xl" {
          width : $pe-template__static-large-lg_and_xl-width
        };
        @if $breakpoint == "md" or $breakpoint == "sm"{
          width : $pe-template__static-large-md_and_sm-width
        };
        @if $breakpoint == "xs"{
          width : $pe-template__static-large-xs-width;
        };
      };
    };
  };

};

@mixin pe-template-static-small(){

  .pe-template__static-small{
    box-sizing    : border-box;
    min-height   : $pe-columns-min-height;
    margin-right : auto;
    margin-left  : auto;

    @include clearfix();

    @each $breakpoint in map-keys($pe-static-template-width-breakpoints) {

      //Get container margin by breakpoint
      $margin                       : map-get($pe-static-template-width-breakpoints, $breakpoint);
      $current-breakpoint-value-get : get-breakpoint-value($breakpoint);

      //Construct media query
      @media(min-width:$current-breakpoint-value-get){
        @if $breakpoint == "lg" or $breakpoint == "xl" or $breakpoint == "md" {
          width : $pe-template__static-small-lg_and_xl_and_md-width;
        };
        @if $breakpoint == "sm"{
          width : $pe-template__static-small-sm-width;
        };
        @if $breakpoint == "xs"{
          width : $pe-template__static-small-xs-width;
        };
      };
    };
  };

};


@mixin pe-template-double(){

  div[class="pe-template__double"] > :first-child {

    @each $breakpoint in map-keys($pe-responsive-breakpoints) {

      $current-breakpoint-value-get : get-breakpoint-value($breakpoint);

      //Construct media query
      @media(min-width:$current-breakpoint-value-get){
        @if $breakpoint == "xs" or $breakpoint == "sm" or $breakpoint == "md"{
          padding-bottom : $pe-template__double-horizontal-margin-height;
        };
        @if $breakpoint == "lg" or $breakpoint == "xl"{
          padding-right  : 0px;
          padding-bottom : 0px;
        };
      };
    };
  };

  .pe-template__double{
    box-sizing   : border-box;
    min-height   : $pe-columns-min-height;
    margin-right : auto;
    margin-left  : auto;

    @include clearfix();
  };


  .pe-template__double--main{
    box-sizing : border-box;
    min-height : $pe-columns-min-height;

    @include clearfix();

    @each $breakpoint in map-keys($pe-responsive-breakpoints) {

      //Get container margin by breakpoint
      $margin                       : map-get($pe-container-margin, $breakpoint);
      $current-breakpoint-value-get : get-breakpoint-value($breakpoint);

      //Construct media query
      @media(min-width:$current-breakpoint-value-get){
        @if $breakpoint == "xs" or $breakpoint == "sm" or $breakpoint == "md"{
          padding-right  : $margin;
          padding-left   : $margin;
          width          : 100%;
        }
        @if $breakpoint == "lg" or $breakpoint == "xl"{
          padding-right : $margin;
          padding-left  : $margin;
          float         : left;
          width         : $pe-template__double--main-width;
        };
      };
    };
  };

  .pe-template__double--sidebar{
    box-sizing   : border-box;
    min-height : $pe-columns-min-height;

    @include clearfix();

    @each $breakpoint in map-keys($pe-responsive-breakpoints) {

      //Get container margin by breakpoint
      $margin                       : map-get($pe-container-margin, $breakpoint);
      $current-breakpoint-value-get : get-breakpoint-value($breakpoint);

      //Construct media query
      @media(min-width:$current-breakpoint-value-get){
        @if $breakpoint == "xs" or $breakpoint == "sm" or $breakpoint == "md"{
          padding-right  : $margin;
          padding-left   : $margin;
          width          : 100%;
        }
        @if $breakpoint == "lg" or $breakpoint == "xl"{
          padding-right : $margin;
          padding-left  : $margin;
          float         : left;
          width         : $pe-template__double--sidebar-width;
        };
      };
    };
  };

};


@mixin pe-template-spacing(){

  //Small Gap Spacing
  div[class="pe-template__small-gap"] > :first-child {
    padding-bottom : $pe-template__small-gap / 2;
    padding-top    : 0px;
  };

  div[class="pe-template__small-gap"] > div {
    padding-bottom : $pe-template__small-gap / 2;
    padding-top    : $pe-template__small-gap / 2;
  };

  div[class="pe-template__small-gap"] > :last-child {
    padding-bottom : 0px;
    padding-top    : $pe-template__small-gap / 2;
  };

  //Large Gap Spacing
  div[class="pe-template__large-gap"] > :first-child {
    padding-bottom : $pe-template__large-gap / 2;
    padding-top    : 0px;
  };

  div[class="pe-template__large-gap"] > div {
    padding-bottom : $pe-template__large-gap / 2;
    padding-top    : $pe-template__large-gap / 2;
  };

  div[class="pe-template__large-gap"] > :last-child {
    padding-bottom : 0px;
    padding-top    : $pe-template__large-gap / 2;
  };

};
