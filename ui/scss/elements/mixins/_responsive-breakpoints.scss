@mixin pe-responsive-breakpoint($breakpoint) {
  $breakpoint: pe-responsive-parse-breakpoint($breakpoint);
  $_min: map-get($breakpoint, min);
  $_max: map-get($breakpoint, max);
  $_query: null;

  @if $_min {
    $_query: '(min-width: #{$_min})';
  }

  @if $_max {
    @if $_min {
      $_query: '#{$_query} and ';
    }

    $_query: '#{$_query}(max-width: #{$_max})';
  }

  @if $_query {
    @media #{$_query} { @content; }
  }
}

@function pe-responsive-parse-breakpoint($breakpoint) {
  $_return: ();
  $_to: index($breakpoint, to);

  @if $_to {
    @if ($_to > 1) {
      $_min-breakpoint: nth($breakpoint, $_to - 1);
      $_return: map-merge($_return, (
          min: pe-responsive-get-breakpoint-value($_min-breakpoint, min)
      ));
    }

    $_max-breakpoint: nth($breakpoint, $_to + 1);
    $_return: map-merge($_return, (
        max: pe-responsive-get-breakpoint-value($_max-breakpoint, max)
    ));
  } @else {
    $_min-breakpoint: nth($breakpoint, 1);
    $_return: map-merge($_return, (min: pe-responsive-get-breakpoint-value($_min-breakpoint, min)));
  }

  @return $_return;
}

@function pe-responsive-get-breakpoint-value($breakpoint, $bound) {
  @if not index(min max, $bound) {
    @error '$bound must be min or max';
  }

  @if not index(map-keys($pe-responsive-breakpoints), $breakpoint) {
    @error '$breakpoint was not recognized: #{$breakpoint}';
  }

  $_return: map-get($pe-responsive-breakpoints, $breakpoint);
  $_return: map-get($_return, $bound);

  @return $_return;
}
